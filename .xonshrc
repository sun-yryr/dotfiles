# エディタ
$EDITOR = '/bin/nano'
$VISUAL = '/bin/nano'
# 補完をEnterで直接実行しない
$COMPLETIONS_CONFIRM = True
# Ctrl + D で終了しない
$IGNOREEOF = True
# tabではなく空白4つ
$INDENT = "    "
# 補完時に大小区別しない
$CASE_SENSITIVE_COMPLETIONS = False
# 連続重複コマンドを保存しない
$HISTCONTROL = "ignoredups"
# 括弧を補完
$XONSH_AUTOPAIR = True
# ディレクトリ名を入力でcd
$AUTO_CD = True
# エラー全て吐くように
$XONSH_SHOW_TRACEBACK = True
# サブプロセスタイムアウトのメッセージ抑制
$SUPPRESS_BRANCH_TIMEOUT_MESSAGE = True
# キー入力即評価（サイコー）
$UPDATE_COMPLETIONS_ON_KEYPRESS = True
# lsコマンドの結果の見た目
$LS_COLORS="di=34:ln=35:so=32:pi=33:ex=31:bd=46;34:cd=43;34:su=41;30:sg=46;30:tw=42;30:ow=43;30"

aliases["la"] = "ls -la"
aliases["tree"] = "tree -a -N -I 'node_modules|.git|.gitignore'"

def gitswitch_peco():
    branch = $(git branch -a | grep "*").replace(' ', '').replace('\n', '').replace('*', '')
    tmp = $(git branch -a --sort=-authordate | grep -v -e '->' -e '*').split('\n')
    branches = set()
    for s in tmp:
        m = re.match(r'^\s*(remotes/origin/)?(\S+)\s*', s)
        if m is None:
            continue
        branches.add("{} -> {}".format(branch, m[2]))
    branches = list(branches)
    selected = $(echo @('\n'.join(branches)) | peco).rstrip('\n')
    selected = selected.replace("{} -> ".format(branch), "")
    git switch @(selected)
aliases["gs"] = gitswitch_peco

# auto ls
@events.on_chdir
def auto_ls(olddir, newdir, **kw):
    ls

@events.on_transform_command
def command_rebuild(cmd):
    # 改行コードを取り除く
    cmd = re.sub(r'\n|\r\n|\r$', '', cmd)
    # github auto clone
    res = re.fullmatch(r'^(https://|git@)github\.com(/|:)(.*)', cmd)
    if res is not None:
        giturl = 'git@github.com:' + res.groups()[2]
        print(giturl)
        return f"git clone {giturl}\n"
    return cmd + "\n"

# 履歴をpecoに流す
# https://qiita.com/riktor/items/4a90b4e125cd091a9d07
# pecoのinstall : https://qiita.com/ngyuki/items/94a7e638655d9910971b
import json
from collections import OrderedDict
from operator import itemgetter
def get_history(session_history=None, return_list=False):
    hist_dir = __xonsh__.env['XONSH_DATA_DIR']
    files = [ os.path.join(hist_dir,f) for f in os.listdir(hist_dir)
              if f.startswith('xonsh-') and f.endswith('.json') ]
    cmds = []
    for fname in files:
        f = open(fname)
        try:
            hist = json.load(f)
            hist = hist['data']['cmds']
            for c in hist:
                cmds.append((c['inp'].replace('\n', ''), c['ts'][0]))
        except:
            # 中身が' 'の場合がある
            pass
        f.close()
    cmds.sort(key=itemgetter(1))
    cmds = [ c[0] for c in cmds[::-1] ]
    if session_history:
        cmds.extend(session_history)
    # dedupe
    zip_with_dummy = list(zip(cmds, [0] * len(cmds)))[::-1]
    cmds = list(OrderedDict(zip_with_dummy).keys())[::-1]
    if return_list:
        return cmds
    else:
        return '\n'.join(cmds)

# sshをpecoに流す
def get_ssh():
    items = re.sub(r'(?i)host ', '', $(cat ~/.ssh/config /etc/ssh/ssh_config | grep -i '^host'))
    
    return items


# キーバインド
from prompt_toolkit.keys import Keys
from prompt_toolkit.filters import (Condition, IsMultiline, HasSelection, EmacsInsertMode, ViInsertMode)
@events.on_ptk_create
def custom_keybindings(bindings, **kw):
    # ptk 2.xでは @bindings.add('c-v') とする
    # コマンド入力中にctrl+vでvim編集
    @bindings.add('c-v')
    def edit_in_editor(event):
        event.current_buffer.tempfile_suffix = '.py'
        event.current_buffer.open_in_editor(event.cli)

    # ctrl+rで履歴をpecoに流して検索
    @bindings.add('c-r')
    def select_history(event):
        sess_history = $(history).split('\n')
        hist = get_history(sess_history)
        selected = $(echo @(hist) | peco)
        event.current_buffer.insert_text(selected.strip())

    # ctrl+sでssh先をpeco
    @bindings.add('c-s')
    def select_ssh(event):
        hosts = '\n'.join([x for x in get_ssh().split('\n') if x!='*' and 'HostKey' not in x])
        selected = $(echo @(hosts) | peco)
        if selected:
            print('ssh {}'.format(selected.strip("\n")))
            ssh @(selected.strip("\n"))

    @bindings.add('c-q')
    def _exit(event):
        event.app.exit(None)


# 直近のxonshjobころすマン
# https://github.com/zardus/xonshrc/blob/master/xonshrc
def _kill_last(args, stdin=None):
	if __xonsh_active_job__ is None:
		print("No active job. Aborting.")
		return
	cmd = 'kill %s %d' % (''.join(args), __xonsh_all_jobs__[__xonsh_active_job__]['pgrp'])
	os.system(cmd)
aliases['kill_last'] = _kill_last

# diskutil infoを見る
# https://github.com/asmeurer/dotfiles/blob/master/.xonshrc
def _free(args, stdin=None):
    disk_info = $(diskutil info /)
    return [i for i in disk_info.splitlines() if "Free" in i][0] + '\n'
aliases['fr'] = _free

# gc
import gc
def _gc(args, stdin=None):
    gc.collect()
aliases['gc'] = _gc

# ライブラリの実行時import
# https://vaaaaaanquish.hatenablog.com/entry/2017/12/26/190153
# xonsh上で使うときがありそうなライブラリはlazyasdで補完時、実行時に読み込み
from xonsh.lazyasd import lazyobject
import importlib
lazy_module_dict = {
    'sys': 'sys',
    'random': 'random',
    'shutil': 'shutil',
    'pd': 'pandas',
    'np': 'numpy',
    'requests': 'requests',
    'os': 'os',
    'plt': 'matplotlib.pyplot',
    'Path': 'pathlib.Path',
    're': 're'
        }
for k,v in lazy_module_dict.items():
    t = "@lazyobject\ndef {}():\n    return importlib.import_module('{}')".format(k, v)
    exec(t)

# プロンプトの表記
$PROMPT = '\n{#6ed4fd}{user} {BOLD_YELLOW}[ {#3d55c8}{short_cwd} {BOLD_YELLOW}] {branch_color}{curr_branch: {}}{NO_COLOR}\n🎐 {#6ed4fd}>>{NO_COLOR} '
xontrib load z
